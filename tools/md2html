#!/usr/bin/perl

## hyphop ##

use Text::Markdown qw(markdown);

our $m = Text::Markdown->new;

our $in = shift or "<&STDIN";
our $out = shift or ">&STDOUT";

sub cat {
    `cat @_`
}

sub savefile {
    my $f;
    my $r = open $f, ">$_[1]";
    return undef unless $r;
    my $l = length $_[0];
    $r = syswrite $f, $_[0], $l;
    warn "[i] save $_[1] $l bytes\n";
    return $r;
}

$_ = cat $in;

s{\b(http(s?)://\S+/(\S+\.(rar|xz|list)))}{[$3]($1)}sgi;
s{(?<=\s)(http(s?)://\S+)}{[$1]($1)}sgi;
#s{(?<!\()(http(s?)://\S+)}{[$1]($1)}sgi;

our %names;

sub getnamelink{
    my $name = lc $_[0];
    $name =~ s/\W/_/sg;
    $name =~ s/_+/_/sg;
    $name =~ s/_$//sg;
    my $n = $name;
    my $i=1;
    while ( $names{$name} ) {
	$name = $n . '_'. $i++;
    }
    $names{$name} = 1;
    warn "[NAME] $name\n";
    "<a name='$name'></a>"
}

s{(\#{2,5}\s+)([^\n]+)}{$1 . getnamelink($2) . $2 }esgi;

#warn $_;

$_ = $m->markdown($_);

$_ = cat('.html.header')
. $_ .
cat('.html.footer');

$_ =~ s{%%(\w+)%%}{$ENV{$1}}sgi;

savefile $_ => $out;

